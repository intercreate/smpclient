[project]
name = "smpclient"
dynamic = ["version"]
description = "Simple Management Protocol (SMP) Client for remotely managing MCU firmware"
authors = [
    { name = "JP Hutchins", email = "jphutchins@gmail.com" },
    { name = "JP Hutchins", email = "jp@intercreate.io" },
]
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.9,<3.14"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries",
    "Framework :: AsyncIO",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
]

[project.urls]
Homepage = "https://www.intercreate.io"
Documentation = "https://intercreate.github.io/smpclient"
Repository = "https://github.com/intercreate/smpclient.git"
Issues = "https://github.com/intercreate/smpclient/issues"

[tool.poetry]
packages = [{ include = "smpclient" }]

version = "0.0.0"
[project.scripts]
mcuimg = "smpclient.mcuboot:mcuimg"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
strict = true
enable = true
vcs = "git"
style = "semver"
metadata = true
tagged-metadata = true
dirty = true
fix-shallow-repository = true
pattern = '(?P<base>\d+\.\d+\.\d+)'
format-jinja = "{% if distance == 0 %}{{ base }}{% else %}{{ base }}-dev{{ distance }}+g{{ commit }}{% endif %}{% if dirty %}.dirty{% endif %}"

[tool.poetry.dependencies]
pyserial = "^3.5"
smp = "^3.1.1"
intelhex = "^2.3.0"
bleak = "^0.22.1"
async-timeout = { version = "^4.0.3", python = "<3.11" }

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
black = "^23.11.0"
flake8 = "^6.1.0"
isort = "^5.12.0"
mypy = "^1.7.0"
mypy-extensions = "^1.0.0"
pytest-asyncio = "^0.23.2"
types-pyserial = "^3.5.0.11"
tox = "^4.15.0"
pydoclint = "^0.5.8"
poetry-dynamic-versioning = "^1.7.1"

[tool.poetry.group.doc.dependencies]
mkdocstrings = { extras = ["python"], version = "^0.26.1" }
mike = "^2.1.3"
mkdocs-material = "^9.5.38"
griffe-inherited-docstrings = "^1.0.1"
griffe = "^1.3.1"
smp = "^3.1.1"

[tool.black]
line-length = 100
skip-string-normalization = true
extend-exclude = "dutfirmware|.venv|tests/fixtures|.tox|.poetry"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
skip = [".venv", "dutfirmware", ".tox"]

[tool.mypy]
disallow_untyped_defs = true
exclude = ['.venv', 'dutfirmware', '.tox', '.poetry']

[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
allow-init-docstring = true
check-return-types = false
check-yield-types = false

[tool.pytest.ini_options]
norecursedirs = "dutfirmware/*"
filterwarnings = ["ignore:The --rsyncdir:DeprecationWarning"]

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.15
    env_list =
        py38
        py39
        py310
        py311
        py312
        py313

    [testenv]
    allowlist_externals =
        poetry
        black
        isort
        flake8
        mypy
        coverage
    commands = 
        poetry install
        black --check .
        isort --check-only .
        flake8 .
        mypy .
        coverage erase
        pytest --cov --maxfail=1
"""

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
